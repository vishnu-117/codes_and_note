
Performance tuning of sql querys:
1. Increase Query Performance with Indexes:
2. Avoid using SELECT *
3. Use stored procedures
4. Use LIMIT or TOP to limit the number of rows returned:
5. Store precomputed sql query
5.Optimize the database design(denormalization)
6.Use query optimization tools
7.Monitor query performance
8. Minimize the use of wildcard characters
9. Use appropriate data types:
10. Avoid subqueries:
11. Use EXISTS instead of IN
12. Use GROUP BY to group data
13.Use WHERE Clause instead of having
14.materilized view
15.parallel execution(postgres)
16.Avoid SELECT DISTINCT
17.Run your query during off-peak hours


LInk: https://medium.com/learning-sql/12-tips-for-optimizing-sql-queries-for-faster-performance-8c6c092d7af1

1. Minimize the use of wildcard characters:
	ex.SELECT * FROM customers WHERE last_name_city LIKE 'P%';

2. Increase Query Performance with Indexes:
	 --->To enhance SQL queries, you can create indexes on the columns that are frequently used in the WHERE,
	 JOIN, and ORDER BY clauses. However, creating too many indexes can slow down data modification operations
	 such as INSERT, UPDATE, and DELETE.
	 --->Consider the trade-offs between read performance and write performance when deciding which columns
	  to index and which types of indexes to use.
	  
	  ex.
	  CREATE INDEX idx_orders_customer_number ON orders (customer_id);

3. Use appropriate data types:
	--->Using appropriate data types for columns in a database can significantly improve query performance.
	 For example, using an integer data type for a column that contains numeric values can make queries run
	 faster than using a text data type. Using the correct data type also ensures data integrity and can prevent
	 data conversion errors.

4. Avoid subqueries:
	--->Subqueries can slow down query performance, especially when used in the WHERE or HAVING clauses.
	 It is important to avoid subqueries whenever possible and to use JOINs or other techniques instead.
	 
	 ex.SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE order_date >= DATEADD(day, -30, GETDATE()));

5. Use LIMIT or TOP to limit the number of rows returned:
	--->The LIMIT or TOP clause must be used to restrict the number of rows returned in SQL queries. There will be fewer data to process and return as a result.

6. Avoid using SELECT *
	--->Using the SELECT * statement can slow down query performance because it returns all columns in a table, including those that are not needed for the query. To optimize SQL queries, it is important to only select the columns that are needed for the query.

7. Use EXISTS instead of IN
	--->A value is compared with a list of values returned by a subquery using the IN operator. However, using IN can slow down query 	performance because it requires the database to perform a full table scan on the subquery. To optimize SQL queries, you can use 		the EXISTS operator instead of IN.
	
	don't: SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE order_date >= DATEADD(day, -30, 			GETDATE()));
	
	do:SELECT * FROM customers c WHERE EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.customer_id AND o.order_date >= 			DATEADD(day, -30, GETDATE()));

8. Use GROUP BY to group data
	--->It is used to group rows based on one or more columns. This can be useful for summarizing data or performing aggregate 	 	functions on groups of data. However, using GROUP BY can slow down query performance if it is used unnecessarily. To optimize SQL queries, you should only use GROUP BY when it is necessary.
	
	don't: SELECT customer_id, COUNT(*) as order_count FROM orders GROUP BY customer_id;
	do: SELECT c.customer_id, c.first_name, c.last_name, o.order_count FROM customers c JOIN (SELECT customer_id, COUNT(*) as 	  order_count FROM orders GROUP BY customer_id) o ON c.customer_id = o.customer_id;

9. Use stored procedures
	--->Stored procedures are precompiled SQL statements that are stored in the database. They can be called from an application or directly from a SQL query. Using stored procedures can improve query performance by reducing the amount of data that is sent between the database and the application, and by reducing the amount of time required to compile and execute the SQL statements.

10. Optimize the database design
	--->Optimizing the database design can also improve query performance. This includes ensuring that tables are properly normalized 	and that indexes are used effectively. In addition, it is important to ensure that the database is properly tuned for the expected workload and that it is configured for the appropriate level of concurrency.

11. Use query optimization tools
	--->There are a variety of query optimization tools available that can help identify performance issues in SQL queries. These tools can provide recommendations for improving query performance, such as creating indexes, rewriting queries, or optimizing the 	database design. Some popular query optimization tools include Microsoft SQL Server Query Optimizer, Oracle SQL Developer, and MySQL Query Optimizer.

12. Monitor query performance
	--->Monitoring query performance is an important step in optimizing SQL queries. By monitoring query performance, it is possible to identify performance issues and make appropriate adjustments. This can include optimizing indexes, rewriting queries, or adjusting the database design. For tracking query performance, a number of tools are available, including SQL Server Profiler, Oracle Enterprise Manager, and MySQL Enterprise Monitor.
	
	
SQL Performance Tuning Tools
	Here are some tools for SQL Performance Tuning:

	SQL Sentry (SolarWinds)
	SQL Doctor (IDERA)
	Profiler (Microsoft)
	SQL Defrag Manager (IDERA)
	DB Optimizer (IDERA)
	SQL Check (IDERA)
	Foglight for SQL Server (Quest Software)
	SQL Index Manager (Red Gate Software)
	Qure Optimizer (DBSophic)
	DBArtisanÂ® (IDERA)
	dbWatch Control Center (dbWatch)
	Plan Explorer (SolarWinds / SentryOne)
	SQL Diagnostic Manager (IDERA)
	Database Performance Analyzer (SolarWinds)
	Applications Manager (ManageEngine)
	NaviCat for SQL Server (NaviCat)